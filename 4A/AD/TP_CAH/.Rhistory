personnages_femmes = filter(personnages, Gender == "Female")
min(personnages_femmes$Sorts)
#9
mean(personnages$Sorts)
filter(personnages, Sorts == 12) %>% select(House)
filter(personnages_femmes, Sorts == 12) %>% select(House)
View(personnages_femmes_Gryf)
View(personnages_femmes)
#9
mean(personnages$Sorts, na.rm = TRUE)
#Les personnages ont lançé en moyenne environ 165 (164.8309) sorts
#On a exclu les valeurs nulles
mean(personnages$Sorts)
((n-1)/n)*var(personnages$Sorts)
n = nrow(personnages$Sorts)
((n-1)/n)*var(personnages$Sorts)
moy_harm(personnages$Sorts)
moy_harm <- function(var) {
i=1
moy=0
while (i<=nrow(var)) {
moy = moy + 1/(1.5/var[i])
}
}
moy_harm(personnages$Sorts)
moy_harm <- function(var) {
moy = 1/(1.5/var)
}
moy_harm(personnages$Sorts)
moy_harm(personnages$Sorts)
moy_harm <- function(var) {
moy = 1/(1.5/var)
return moy
}
moy_harm(personnages$Sorts)
n = nrow(personnages$Sorts)
moy_harm <- function(var) {
moy = 1/(1.5/var)
return moy
}
moy_harm(personnages$Sorts)
moy_harm <- function(var) {
moy = 1/(1.5/var)
return moy
}
moy_harm <- function(var) {
return 1/(1.5/var)
}
moy_harm <- function(var) {
return(1/sum(1.5/var))
}
n = nrow(personnages$Sorts)
moy_harm(personnages$Sorts)
n = length(personnages$Sorts)
((n-1)/n)*var(personnages$Sorts)
#11
points_Gryf <- personnages %>% filter(Job == "Student" && House == "Gryffindor") %>% sum(Points)
etudiant_Gryf <- personnages %>% filter(Job == "Student" && House == "Gryffindor")
sum(etudiant_Gryf$Points)
etudiant_Rav <- personnages %>% filter(Job == "Student" && House == "Ravenclaw")
sum(etudiant_Rav$Points)
etudiant_Gryf <- personnages %>% filter(Job == "Student" && House == "Gryffindor")
sum(etudiant_Gryf$Points)
etudiant_Rav <- personnages %>% filter(Job == "Student" && House == "Ravenclaw")
sum(etudiant_Rav$Points)
etudiant_Sly <- personnages %>% filter(Job == "Student" && House == "Slytherin")
sum(etudiant_Sly$Points)
etudiant_Huf <- personnages %>% filter(Job == "Student" && House == "Hufflepuff")
sum(etudiant_Huf$Points)
etudiant_Gryf <- personnages %>% filter(Job == "Student" && House == "Gryffindor")
points_Gryf <- sum(etudiant_Gryf$Points)
etudiant_Rav <- personnages %>% filter(Job == "Student" && House == "Ravenclaw")
points_Rav <- sum(etudiant_Rav$Points)
etudiant_Rav <- personnages %>% filter(Job == "Student" && House == "Ravenclaw")
points_Rav <- sum(etudiant_Rav$Points)
etudiant_Sly <- personnages %>% filter(Job == "Student" && House == "Slytherin")
points_Sly <- sum(etudiant_Sly$Points)
etudiant_Huf <- personnages %>% filter(Job == "Student" && House == "Hufflepuff")
points_Huf <- sum(etudiant_Huf$Points)
View(etudiant_Rav)
etudiant_Sly <- personnages %>% filter(Job == "Student" && House == "Slytherin")
etudiant_Rav <- personnages %>% filter(Job == "Student") %>%  filter(House == "Ravenclaw")
etudiant_Gryf <- personnages %>% filter(Job == "Student" && House == "Gryffindor")
points_Gryf <- sum(etudiant_Gryf$Points)
etudiant_Rav <- personnages %>% filter(Job == "Student") %>%  filter(House == "Ravenclaw")
points_Rav <- sum(etudiant_Rav$Points)
etudiant_Sly <- personnages %>% filter(Job == "Student") %>% filter(House == "Slytherin")
points_Sly <- sum(etudiant_Sly$Points)
etudiant_Huf <- personnages %>% filter(Job == "Student") %>% filter(House == "Hufflepuff")
points_Huf <- sum(etudiant_Huf$Points)
#a
drages <- c("choco", "menthe", "orange", "epinard", "foie et tripe")
#choco = chocolat
sample(drages,
7,
replace = FALSE,
prob = c(20/100,
30/100,
10/100,
10/100,
30/100))
#12
#a
drages <- c("C", "M", "O", "E", "FT")
#C : chocolat
#M : menthe
#O : orange
#E : epinard
#FT : foie et tripe
#7
#Harry tire 7 bonbons
sample(drages,
7,
replace = F,
prob = c(20/100,
30/100,
10/100,
10/100,
30/100))
#8
#On ne filtre que sur les étudiantes
personnages_femmes = filter(personnages, Gender == "Female" && Job == "Student")
#8
#On ne filtre que sur les étudiantes
etudiantes_femmes = filter(personnages, Gender == "Female") %>% filter(Job == "Student")
View(etudiantes_femmes)
etudiantes_femmes = filter(personnages, Gender == "Female") %>% filter(Job == "Student")
min(etudiantes_femmes$Sorts)
filter(etudiantes_femmes, Sorts == 12) %>% select(House)
min(etudiantes_femmes$Sorts)
filter(etudiantes_femmes, Sorts == 21) %>% select(House)
View(potions)
#12
#a
drages <- c("C", "C", "M", "M", "M", "O", "E", "FT", "FT", "FT")
#C : chocolat -> 20/100 = 2/10
#M : menthe ->30/100 = 3/10
#O : orange ->10/100 = 1/10
#E : epinard ->10/100 = 1/10
#FT : foie et tripe -> 30/100 = 3/10
#b
#Harry tire 7 bonbons
sample(drages,
7,
replace = F
)
tirage <- c(sample(drages, #on tire dans drages
7, #7 fois
replace = F #Sans remise
))
tirage <- sample(drages, #on tire dans drages
7, #7 fois
replace = F #Sans remise
)
Hermione <- sample(Harry, 2, replace = F)
Harry <- sample(drages, #on tire dans drages
7, #7 fois
replace = F #Sans remise
)
Hermione <- sample(Harry, 2, replace = F)
Harry <- Harry - Hermione
Ron <- c("C", "C", "M", "M", "M", "O", "E", "FT", "FT", "FT")
#C : chocolat -> 20/100 = 2/10
#M : menthe ->30/100 = 3/10
#O : orange ->10/100 = 1/10
#E : epinard ->10/100 = 1/10
#FT : foie et tripe -> 30/100 = 3/10
#b
#Harry tire 7 bonbons
Harry <- sample(Ron, #on tire dans drages
7, #7 fois
replace = F #Sans remise
)
#Il en donne 2 à Hermione
Hermione <- sample(Harry, 2, replace = F)
Harry <- Harry - Hermione
#Hermione en remet un dans le paquet
#Hermione en remet un dans le paquet
Rendu <- sample(Hermione, 1, replace = F)
view(Harry)
Harry <- diff(Harry, Hermione)
Ron <- Ron -c(Harry)
?resample
Choixpeau <-function(){
X <- runif(4, 0, 3)
Y <- rgeom(4, 0.9)
Z = X+Y
max <- round(max(Z))
if(max%%2 == 1 && max%%3!=0) {return("Slytherin")}
if(max%%2 == 1 && max%%3==0) return("Ravenclaw")
if(max%%2==0 && max%%7!=0) return("Hufflepuff")
if(max%%2==0 && max%%7==0) return("Gryffindor")
}
#13
Choixpeau <-function(){
X <- runif(4, 0, 3)
Y <- rgeom(4, 0.9)
Z = X+Y
max <- round(max(Z))
if(max%%2==1 && max%%3!=0) {return("Slytherin")}
if(max%%2==1 && max%%3==0) return("Ravenclaw")
if(max%%2==0 && max%%7!=0) return("Hufflepuff")
if(max%%2==0 && max%%7==0) return("Gryffindor")
}
Choixpeau <-function(){
X <- runif(4, 0, 3)
Y <- rgeom(4, 0.9)
Z = X+Y
max <- round(max(Z))
if(max%%2==1 && max%%3!=0) return("Slytherin")
if(max%%2==1 && max%%3==0) return("Ravenclaw")
if(max%%2==0 && max%%7!=0) return("Hufflepuff")
if(max%%2==0 && max%%7==0) return("Gryffindor")
}
if(max%%2==0 && max%%7==0) return("Gryffindor") #Si pair et divisible par 7
Choixpeau <-function(){
X <- runif(4, 0, 3)
Y <- rgeom(4, 0.9)
Z = X+Y
max <- round(max(Z))
if(max%%2==1 && max%%3!=0) return("Slytherin") #Si impair et non divisible par 3
if(max%%2==1 && max%%3==0) return("Ravenclaw") #Si impair et divisible par 3
if(max%%2==0 && max%%7!=0) return("Hufflepuff") #Si pair et non divisible par 7
if(max%%2==0 && max%%7==0) return("Gryffindor") #Si pair et divisible par 7
}
Choixpeau()
Choixpeau()
Choixpeau()
#Partie 1
library(dplyr)
#1
library(readr)
#Importation de la table personnages
personnages <- read_delim("personnages.csv", ";")
#Importation de la table potions
potions <- read_delim("potions.csv", ";")
#2
#dim renvoie le nombre de lignes et la nombre de colonnes
dim(personnages)
#ici, 136 lignes et 11 colonnes
#3
#On applique un filtre (Gender == "Male") à la table personnage
personnages_hommes <- personnages %>% filter(Gender == "Male")
#On compte le nombre de lignes de personnages_hommes
nrow(personnages_hommes)
#Resultat : 89 hommes
#4
#On applique un filtre (Gender == "Female" et House = "Gryffindor")
#à la table personnages
personnages_femmes_Gryf <- personnages %>% filter(Gender == "Female" & House == "Gryffindor")
#On compte le nombre de lignes de la table personnages_femmes_Gryf
nrow(personnages_femmes_Gryf)
#Resultat : 12 femmes à Gryffindor
#5
#a
which(personnages$Name == "Gilderoy Lockhart")
#Le personnage Gilderoy Lockhart est à la colonne 36
#b
personnages$Hair_colour[36]
#c
filter(personnages, Name =="Gilderoy Lockhart") %>% select(Hair_colour)
filter(personnages, Name =="Gilderoy Lockhart") %>% select(Eye_colour)
#Gilderoy Lockhart a les cheveux blond et les yeux bleus
#d
filter(personnages, Eye_colour == "Blue") %>% select(Name)
#Les personnages qui ont les yeux de la même couleur que Gilderoy Lockhart sont:
#Ronald Bilius Weasley
#Albus Percival Wulfric Brian Dumbledore
#Peter Pettigrew
#Percy Ignatius Weasley
#(Bill) William Arthur Weasley
#Lavender Brown
#Gilderoy Lockhart
#Narcissa Malfoy
#Helga Hufflepuff
#Newton Scamander
#Corban Yaxley
#Dudley Dursley
#Gellert Grindelwald
#6
patronus_EM <- filter(personnages, Name == "Ernest Macmillan") %>% select(Patronus)
patronus_DJU <- filter(personnages, Name == "Dolores Jane Umbridge") %>% select(Patronus)
meme_patronus <- patronus_EM == patronus_DJU
#Ils n'ont pas le même patronus
#7
hist(personnages$Sorts)
#8
#On ne filtre que sur les étudiantes
etudiantes_femmes = filter(personnages, Gender == "Female") %>% filter(Job == "Student")
min(etudiantes_femmes$Sorts)
filter(etudiantes_femmes, Sorts == 21) %>% select(House)
#L'etudiante qui a lançe le moins de sorts (21 sorts) est à Ravenclaw
#9
mean(personnages$Sorts, na.rm = TRUE)
#Les personnages ont lançé en moyenne environ 165 (164.8309) sorts
#On a exclu les valeurs nulles
mean(personnages$Sorts)
#Les personnages ont lançé en moyenne environ 165 (164.8309) sorts
n = length(personnages$Sorts)
((n-1)/n)*var(personnages$Sorts)
#L'écart type non corrigé est de 10 745.92
#10
moy_harm <- function(var) {
return(1/sum(1.5/var))
}
moy_harm(personnages$Sorts)
#La moyenne harmonique est 0.31
#11
etudiant_Gryf <- personnages %>% filter(Job == "Student" && House == "Gryffindor")
points_Gryf <- sum(etudiant_Gryf$Points)
etudiant_Rav <- personnages %>% filter(Job == "Student") %>%  filter(House == "Ravenclaw")
points_Rav <- sum(etudiant_Rav$Points)
etudiant_Sly <- personnages %>% filter(Job == "Student") %>% filter(House == "Slytherin")
points_Sly <- sum(etudiant_Sly$Points)
etudiant_Huf <- personnages %>% filter(Job == "Student") %>% filter(House == "Hufflepuff")
points_Huf <- sum(etudiant_Huf$Points)
#La coupe doit être remise à Gryffindor
#1 Gryffindor : 3646
#2 Slytherin : 673
#3 Ravenclaw : 629
#4 Hufflepuff : 367
#12
#a
Ron <- c("C", "C", "M", "M", "M", "O", "E", "FT", "FT", "FT")
#C : chocolat -> 20/100 = 2/10
#M : menthe ->30/100 = 3/10
#O : orange ->10/100 = 1/10
#E : epinard ->10/100 = 1/10
#FT : foie et tripe -> 30/100 = 3/10
#b
#Harry tire 7 bonbons
Harry <- sample(Ron, #on tire dans drages
7, #7 fois
replace = F #Sans remise
)
#Il en donne 2 à Hermione
Hermione <- sample(Harry, 2, replace = F)
#Hermione en remet un dans le paquet
Rendu <- sample(Hermione, 1, replace = F)
#13
Choixpeau <-function(){
X <- runif(4, 0, 3)
Y <- rgeom(4, 0.9)
Z = X+Y
max <- round(max(Z))
if(max%%2==1 && max%%3!=0) return("Slytherin") #Si impair et non divisible par 3
if(max%%2==1 && max%%3==0) return("Ravenclaw") #Si impair et divisible par 3
if(max%%2==0 && max%%7!=0) return("Hufflepuff") #Si pair et non divisible par 7
if(max%%2==0 && max%%7==0) return("Gryffindor") #Si pair et divisible par 7
}
Choixpeau()
#Importation des packages
library("FactoMineR")
library("psych")
library("Hmisc")
library(factoextra)
library(readxl)
library(plyr)
install.packages("philentropy")
library(philentropy)
library(ggplot2)
source('~/4A/AD/TP_CAH/TP_CAH.R')
#----------Lecture et préparation des données----------
mydata=read.table("Race-canine.txt",sep="\t", head=T,encoding = "latin1", colClasses = "factor" )
setwd("~/4A/AD/TP_CAH")
#----------Lecture et préparation des données----------
mydata=read.table("Race-canine.txt",sep="\t", head=T,encoding = "latin1", colClasses = "factor" )
rownames(mydata)<-mydata$Race
mydata<-mydata[,-1]
head(mydata)
#----------Realisation de l'ACH----------
mydata.mca = MCA(mydata,quali.sup=7,ncp=4)
hcpc=HCPC(mydata.mca,nb.clust=4,proba=1)
tab1=hcpc$call
plot(hcpc,choice="bar")
hcpc=HCPC(mydata.mca,nb.clust=4,proba=1)
hcpc=HCPC(mydata.mca,nb.clust=4,proba=1)
tab1=hcpc$call
plot(hcpc,choice="bar")
plot(hcpc,choice="tree")
plot(hcpc,choice="map",draw.tree = F)
png("plot11.png", height=1200, width=1200, res=250, pointsize=8)
plot(hcpc,choice="bar")
dev.off()
png("plot12.png", height=1200, width=1200, res=250, pointsize=8)
plot(hcpc,choice="tree")
dev.off()
png("plot13.png", height=1200, width=1200, res=250, pointsize=8)
plot(hcpc,choice="map",draw.tree = F)
dev.off()
png("plot14.png", height=1200, width=1200, res=250, pointsize=8)
plot(hcpc,choice="3D.map")
dev.off()
#mydata.mca = MCA(mydata,quali.sup=7,ncp=10)
#hcpc=HCPC(mydata.mca,nb.clust=6)
tab2=hcpc$call
hcpc$data.clust
hcpc$desc.ind
hcpc$desc.var
pl1=fviz_cluster(hcpc, ellipse=F)
fviz_add(pl1,mydata.mca$quali.sup$coord)
mydata1
mydata1<-cbind(mydata,hcpc$call$X[,5][match(rownames(mydata), rownames(hcpc$call$X))])
colnames(mydata1)<-c(colnames(mydata),"Classe")
for( i in 1:4)
{for (j in 1:7)
{ cl = as.data.frame(mydata1[which(mydata1["Classe"]==i),])
barplot(table(factor(cl[,j]))/sum(table(factor(cl[,j]))), main= paste("classe ", as.character(i), colnames(cl)[j]))}
}
library(xlsx)
install.packages(xlsx)
install.packages(xlsx)
install.packages(xlsx)
library(xlsx)
install.packages("xlsx")
library(xlsx)
write.xlsx(hcpc$data.clust,file="TP4-4facteurs-RC.xlsx",sheetName="clust")
for (i in 1:4)
{
write.xlsx(hcpc$desc.axes$quanti[i],file="TP4-4facteurs-RC.xlsx",sheetName=paste("axe",as.character(i)),append=T)
write.xlsx(hcpc$desc.var$category[i],file="TP4-4facteurs-RC.xlsx",sheetName=paste("var",as.character(i)),append=T)
write.xlsx(hcpc$desc.ind$para[i],file="TP4-4facteurs-RC.xlsx",sheetName=paste("distances",as.character(i)),append=T)
}
mydata.mca = MCA(mydata,quali.sup=7,ncp=10)
hcpc=HCPC(mydata.mca,nb.clust=4,proba=1)
hcpc=HCPC(mydata.mca,nb.clust=4,proba=1)
hcpc=HCPC(mydata.mca,nb.clust=4,proba=1)
mydata.mca = MCA(mydata,quali.sup=7,ncp=10)
mydata.mca = MCA(mydata,quali.sup=7,ncp=10)
hcpc=HCPC(mydata.mca,nb.clust=4,proba=1)
tab1=hcpc$call
plot(hcpc,choice="bar")
plot(hcpc,choice="tree")
plot(hcpc,choice="map",draw.tree = F)
plot(hcpc,choice="3D.map")
source('~/4A/AD/TP_CAH/TP_CAH.R')
hcpc$data.clust
pl1=fviz_cluster(hcpc, ellipse=F)
fviz_add(pl1,mydata.mca$quali.sup$coord)
mydata1<-cbind(mydata,hcpc$call$X[,5][match(rownames(mydata), rownames(hcpc$call$X))])
colnames(mydata1)<-c(colnames(mydata),"Classe")
for( i in 1:4)
{for (j in 1:7)
{ cl = as.data.frame(mydata1[which(mydata1["Classe"]==i),])
barplot(table(factor(cl[,j]))/sum(table(factor(cl[,j]))), main= paste("classe ", as.character(i), colnames(cl)[j]))}
}
#mydata.mca = MCA(mydata,quali.sup=7,ncp=10)
#hcpc=HCPC(mydata.mca,nb.clust=6)
tab2=hcpc$call
hcpc$data.clust
hcpc$desc.ind
hcpc$desc.var
hcpc=HCPC(mydata.mca,nb.clust=4,proba=1)
tab1=hcpc$call
plot(hcpc,choice="bar")
plot(hcpc,choice="tree")
plot(hcpc,choice="map",draw.tree = F)
plot(hcpc,choice="3D.map")
png("plot11.png", height=1200, width=1200, res=250, pointsize=8)
plot(hcpc,choice="bar")
dev.off()
png("plot12.png", height=1200, width=1200, res=250, pointsize=8)
plot(hcpc,choice="tree")
dev.off()
png("plot13.png", height=1200, width=1200, res=250, pointsize=8)
plot(hcpc,choice="map",draw.tree = F)
dev.off()
png("plot14.png", height=1200, width=1200, res=250, pointsize=8)
plot(hcpc,choice="3D.map")
dev.off()
#mydata.mca = MCA(mydata,quali.sup=7,ncp=10)
#hcpc=HCPC(mydata.mca,nb.clust=6)
tab2=hcpc$call
hcpc$data.clust
hcpc=HCPC(mydata.mca,nb.clust=4,proba=1)
mydata1<-cbind(mydata,hcpc$call$X[,5][match(rownames(mydata), rownames(hcpc$call$X))])
colnames(mydata1)<-c(colnames(mydata),"Classe")
for( i in 1:4)
{for (j in 1:7)
{ cl = as.data.frame(mydata1[which(mydata1["Classe"]==i),])
barplot(table(factor(cl[,j]))/sum(table(factor(cl[,j]))), main= paste("classe ", as.character(i), colnames(cl)[j]))}
}
#----------Realisation de l'ACH----------
mydata.mca = MCA(mydata,quali.sup=7,ncp=4)
hcpc=HCPC(mydata.mca,nb.clust=4,proba=1)
#----------Realisation de l'ACH----------
mydata.mca = MCA(mydata,quali.sup=7,ncp=4)
hcpc=HCPC(mydata.mca,nb.clust=4,proba=1)
tab1=hcpc$call
plot(hcpc,choice="bar")
plot(hcpc,choice="tree")
plot(hcpc,choice="map",draw.tree = F)
plot(hcpc,choice="3D.map")
png("plot11.png", height=1200, width=1200, res=250, pointsize=8)
plot(hcpc,choice="bar")
dev.off()
png("plot12.png", height=1200, width=1200, res=250, pointsize=8)
plot(hcpc,choice="tree")
dev.off()
png("plot13.png", height=1200, width=1200, res=250, pointsize=8)
plot(hcpc,choice="map",draw.tree = F)
dev.off()
png("plot14.png", height=1200, width=1200, res=250, pointsize=8)
plot(hcpc,choice="3D.map")
dev.off()
#mydata.mca = MCA(mydata,quali.sup=7,ncp=10)
#hcpc=HCPC(mydata.mca,nb.clust=6)
tab2=hcpc$call
hcpc$data.clust
hcpc$desc.ind
hcpc$desc.var
hcpc$desc.var
