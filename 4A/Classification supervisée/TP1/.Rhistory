&& personnages$Eye_colour == personnages$Eye_colour[[i]])
#b
personnages %>% filter(personnages$Hair_colour == personnages$Hair_colour[i]
&& personnages$Eye_colour == personnages$Eye_colour[i])
#b
personnages %>% filter(personnages$Hair_colour == personnages$Hair_colour[i]
&& personnages$Eye_colour == personnages$Eye_colour$i)
personnages %>% filter(personnages$Hair_colour == personnages$Hair_colour$i
&& personnages$Eye_colour == personnages$Eye_colour$i)
(personnages, name=="Gilderoy Lockhart")
#c
filter(personnages, Name=="Gilderoy Lockhart")
#c
cheveux = select(personnages$Hair_Colour) %>% filter(personnages, Name=="Gilderoy Lockhart")
#c
cheveux = select(personnages$Hair_colour) %>% filter(personnages, Name=="Gilderoy Lockhart")
#c
cheveux = select(personnages, Hair_colour) %>% filter(personnages, Name=="Gilderoy Lockhart")
#c
cheveux = select(personnages, Hair_colour) %>% filter(personnages, Name =="Gilderoy Lockhart")
#c
cheveux = filter(personnages, Name =="Gilderoy Lockhart") %>% select(Hair_Colour)
#c
cheveux = filter(personnages, Name =="Gilderoy Lockhart") %>% select(Hair_colour)
View(cheveux)
yeux = filter(personnages, Name =="Gilderoy Lockhart") %>% select(Eyes_colour)
yeux = filter(personnages, Name =="Gilderoy Lockhart") %>% select(Eye_colour)
View(yeux)
#d
nom_perso = filter(personnages, Hair_colour == cheveux, Eye_colour == yeux) %>% select(Name)
View(nom_perso)
#d
nom_perso = filter(personnages, Hair_colour == cheveux[1], Eye_colour == yeux[1]) %>% select(Name)
#6
patronus_EM <- filter(personnages, Name == "Ernest Macmillan") %>% select(Patronus)
patronus_DJU <- filter(personnages, Name == "Dolores Jane Umbridge") %>% select(Patronus)
meme_patronus <- patronus_EM == patronus_DJU
View(meme_patronus)
#d
nom_perso = filter(Eye_colour == yeux[1]) %>% select(Name)
#d
nom_perso = filter(personnages, Eye_colour == yeux[1]) %>% select(Name)
#d
nom_perso = filter(personnages, Eye_colour == "Blue") %>% select(Name)
#d
filter(personnages, Eye_colour == "Blue") %>% select(Name)
#b
personnages$Hair_colour[i]
#b
personnages$Hair_colour[36]
View(potions)
View(personnages)
#7
hist(personnages$Sorts)
#8
min(personnages$Sorts)
personnages$House[3]
filter(personnages, Sorts == 3)
filter(personnages, Sorts == 3) %>% select(House)
#9
mean(personnages$Sorts)
filter(personnages, Sorts == 3 && Gender == "Female") %>% select(House)
#8
filter(personnages, Gender == "Female") %>% min(Sorts)
#8
filter(personnages, Gender == "Female") %>% min(Sorts)
#8
filter(personnages, Gender == "Female") %>% select(min(Sorts))
#8
personnages_femmes = filter(personnages, Gender == "Female")
min(personnages_femmes$Sorts)
#9
mean(personnages$Sorts)
filter(personnages, Sorts == 12) %>% select(House)
filter(personnages_femmes, Sorts == 12) %>% select(House)
View(personnages_femmes_Gryf)
View(personnages_femmes)
#9
mean(personnages$Sorts, na.rm = TRUE)
#Les personnages ont lançé en moyenne environ 165 (164.8309) sorts
#On a exclu les valeurs nulles
mean(personnages$Sorts)
((n-1)/n)*var(personnages$Sorts)
n = nrow(personnages$Sorts)
((n-1)/n)*var(personnages$Sorts)
moy_harm(personnages$Sorts)
moy_harm <- function(var) {
i=1
moy=0
while (i<=nrow(var)) {
moy = moy + 1/(1.5/var[i])
}
}
moy_harm(personnages$Sorts)
moy_harm <- function(var) {
moy = 1/(1.5/var)
}
moy_harm(personnages$Sorts)
moy_harm(personnages$Sorts)
moy_harm <- function(var) {
moy = 1/(1.5/var)
return moy
}
moy_harm(personnages$Sorts)
n = nrow(personnages$Sorts)
moy_harm <- function(var) {
moy = 1/(1.5/var)
return moy
}
moy_harm(personnages$Sorts)
moy_harm <- function(var) {
moy = 1/(1.5/var)
return moy
}
moy_harm <- function(var) {
return 1/(1.5/var)
}
moy_harm <- function(var) {
return(1/sum(1.5/var))
}
n = nrow(personnages$Sorts)
moy_harm(personnages$Sorts)
n = length(personnages$Sorts)
((n-1)/n)*var(personnages$Sorts)
#11
points_Gryf <- personnages %>% filter(Job == "Student" && House == "Gryffindor") %>% sum(Points)
etudiant_Gryf <- personnages %>% filter(Job == "Student" && House == "Gryffindor")
sum(etudiant_Gryf$Points)
etudiant_Rav <- personnages %>% filter(Job == "Student" && House == "Ravenclaw")
sum(etudiant_Rav$Points)
etudiant_Gryf <- personnages %>% filter(Job == "Student" && House == "Gryffindor")
sum(etudiant_Gryf$Points)
etudiant_Rav <- personnages %>% filter(Job == "Student" && House == "Ravenclaw")
sum(etudiant_Rav$Points)
etudiant_Sly <- personnages %>% filter(Job == "Student" && House == "Slytherin")
sum(etudiant_Sly$Points)
etudiant_Huf <- personnages %>% filter(Job == "Student" && House == "Hufflepuff")
sum(etudiant_Huf$Points)
etudiant_Gryf <- personnages %>% filter(Job == "Student" && House == "Gryffindor")
points_Gryf <- sum(etudiant_Gryf$Points)
etudiant_Rav <- personnages %>% filter(Job == "Student" && House == "Ravenclaw")
points_Rav <- sum(etudiant_Rav$Points)
etudiant_Rav <- personnages %>% filter(Job == "Student" && House == "Ravenclaw")
points_Rav <- sum(etudiant_Rav$Points)
etudiant_Sly <- personnages %>% filter(Job == "Student" && House == "Slytherin")
points_Sly <- sum(etudiant_Sly$Points)
etudiant_Huf <- personnages %>% filter(Job == "Student" && House == "Hufflepuff")
points_Huf <- sum(etudiant_Huf$Points)
View(etudiant_Rav)
etudiant_Sly <- personnages %>% filter(Job == "Student" && House == "Slytherin")
etudiant_Rav <- personnages %>% filter(Job == "Student") %>%  filter(House == "Ravenclaw")
etudiant_Gryf <- personnages %>% filter(Job == "Student" && House == "Gryffindor")
points_Gryf <- sum(etudiant_Gryf$Points)
etudiant_Rav <- personnages %>% filter(Job == "Student") %>%  filter(House == "Ravenclaw")
points_Rav <- sum(etudiant_Rav$Points)
etudiant_Sly <- personnages %>% filter(Job == "Student") %>% filter(House == "Slytherin")
points_Sly <- sum(etudiant_Sly$Points)
etudiant_Huf <- personnages %>% filter(Job == "Student") %>% filter(House == "Hufflepuff")
points_Huf <- sum(etudiant_Huf$Points)
#a
drages <- c("choco", "menthe", "orange", "epinard", "foie et tripe")
#choco = chocolat
sample(drages,
7,
replace = FALSE,
prob = c(20/100,
30/100,
10/100,
10/100,
30/100))
#12
#a
drages <- c("C", "M", "O", "E", "FT")
#C : chocolat
#M : menthe
#O : orange
#E : epinard
#FT : foie et tripe
#7
#Harry tire 7 bonbons
sample(drages,
7,
replace = F,
prob = c(20/100,
30/100,
10/100,
10/100,
30/100))
#8
#On ne filtre que sur les étudiantes
personnages_femmes = filter(personnages, Gender == "Female" && Job == "Student")
#8
#On ne filtre que sur les étudiantes
etudiantes_femmes = filter(personnages, Gender == "Female") %>% filter(Job == "Student")
View(etudiantes_femmes)
etudiantes_femmes = filter(personnages, Gender == "Female") %>% filter(Job == "Student")
min(etudiantes_femmes$Sorts)
filter(etudiantes_femmes, Sorts == 12) %>% select(House)
min(etudiantes_femmes$Sorts)
filter(etudiantes_femmes, Sorts == 21) %>% select(House)
View(potions)
#12
#a
drages <- c("C", "C", "M", "M", "M", "O", "E", "FT", "FT", "FT")
#C : chocolat -> 20/100 = 2/10
#M : menthe ->30/100 = 3/10
#O : orange ->10/100 = 1/10
#E : epinard ->10/100 = 1/10
#FT : foie et tripe -> 30/100 = 3/10
#b
#Harry tire 7 bonbons
sample(drages,
7,
replace = F
)
tirage <- c(sample(drages, #on tire dans drages
7, #7 fois
replace = F #Sans remise
))
tirage <- sample(drages, #on tire dans drages
7, #7 fois
replace = F #Sans remise
)
Hermione <- sample(Harry, 2, replace = F)
Harry <- sample(drages, #on tire dans drages
7, #7 fois
replace = F #Sans remise
)
Hermione <- sample(Harry, 2, replace = F)
Harry <- Harry - Hermione
Ron <- c("C", "C", "M", "M", "M", "O", "E", "FT", "FT", "FT")
#C : chocolat -> 20/100 = 2/10
#M : menthe ->30/100 = 3/10
#O : orange ->10/100 = 1/10
#E : epinard ->10/100 = 1/10
#FT : foie et tripe -> 30/100 = 3/10
#b
#Harry tire 7 bonbons
Harry <- sample(Ron, #on tire dans drages
7, #7 fois
replace = F #Sans remise
)
#Il en donne 2 à Hermione
Hermione <- sample(Harry, 2, replace = F)
Harry <- Harry - Hermione
#Hermione en remet un dans le paquet
#Hermione en remet un dans le paquet
Rendu <- sample(Hermione, 1, replace = F)
view(Harry)
Harry <- diff(Harry, Hermione)
Ron <- Ron -c(Harry)
?resample
Choixpeau <-function(){
X <- runif(4, 0, 3)
Y <- rgeom(4, 0.9)
Z = X+Y
max <- round(max(Z))
if(max%%2 == 1 && max%%3!=0) {return("Slytherin")}
if(max%%2 == 1 && max%%3==0) return("Ravenclaw")
if(max%%2==0 && max%%7!=0) return("Hufflepuff")
if(max%%2==0 && max%%7==0) return("Gryffindor")
}
#13
Choixpeau <-function(){
X <- runif(4, 0, 3)
Y <- rgeom(4, 0.9)
Z = X+Y
max <- round(max(Z))
if(max%%2==1 && max%%3!=0) {return("Slytherin")}
if(max%%2==1 && max%%3==0) return("Ravenclaw")
if(max%%2==0 && max%%7!=0) return("Hufflepuff")
if(max%%2==0 && max%%7==0) return("Gryffindor")
}
Choixpeau <-function(){
X <- runif(4, 0, 3)
Y <- rgeom(4, 0.9)
Z = X+Y
max <- round(max(Z))
if(max%%2==1 && max%%3!=0) return("Slytherin")
if(max%%2==1 && max%%3==0) return("Ravenclaw")
if(max%%2==0 && max%%7!=0) return("Hufflepuff")
if(max%%2==0 && max%%7==0) return("Gryffindor")
}
if(max%%2==0 && max%%7==0) return("Gryffindor") #Si pair et divisible par 7
Choixpeau <-function(){
X <- runif(4, 0, 3)
Y <- rgeom(4, 0.9)
Z = X+Y
max <- round(max(Z))
if(max%%2==1 && max%%3!=0) return("Slytherin") #Si impair et non divisible par 3
if(max%%2==1 && max%%3==0) return("Ravenclaw") #Si impair et divisible par 3
if(max%%2==0 && max%%7!=0) return("Hufflepuff") #Si pair et non divisible par 7
if(max%%2==0 && max%%7==0) return("Gryffindor") #Si pair et divisible par 7
}
Choixpeau()
Choixpeau()
Choixpeau()
#Partie 1
library(dplyr)
#1
library(readr)
#Importation de la table personnages
personnages <- read_delim("personnages.csv", ";")
#Importation de la table potions
potions <- read_delim("potions.csv", ";")
#2
#dim renvoie le nombre de lignes et la nombre de colonnes
dim(personnages)
#ici, 136 lignes et 11 colonnes
#3
#On applique un filtre (Gender == "Male") à la table personnage
personnages_hommes <- personnages %>% filter(Gender == "Male")
#On compte le nombre de lignes de personnages_hommes
nrow(personnages_hommes)
#Resultat : 89 hommes
#4
#On applique un filtre (Gender == "Female" et House = "Gryffindor")
#à la table personnages
personnages_femmes_Gryf <- personnages %>% filter(Gender == "Female" & House == "Gryffindor")
#On compte le nombre de lignes de la table personnages_femmes_Gryf
nrow(personnages_femmes_Gryf)
#Resultat : 12 femmes à Gryffindor
#5
#a
which(personnages$Name == "Gilderoy Lockhart")
#Le personnage Gilderoy Lockhart est à la colonne 36
#b
personnages$Hair_colour[36]
#c
filter(personnages, Name =="Gilderoy Lockhart") %>% select(Hair_colour)
filter(personnages, Name =="Gilderoy Lockhart") %>% select(Eye_colour)
#Gilderoy Lockhart a les cheveux blond et les yeux bleus
#d
filter(personnages, Eye_colour == "Blue") %>% select(Name)
#Les personnages qui ont les yeux de la même couleur que Gilderoy Lockhart sont:
#Ronald Bilius Weasley
#Albus Percival Wulfric Brian Dumbledore
#Peter Pettigrew
#Percy Ignatius Weasley
#(Bill) William Arthur Weasley
#Lavender Brown
#Gilderoy Lockhart
#Narcissa Malfoy
#Helga Hufflepuff
#Newton Scamander
#Corban Yaxley
#Dudley Dursley
#Gellert Grindelwald
#6
patronus_EM <- filter(personnages, Name == "Ernest Macmillan") %>% select(Patronus)
patronus_DJU <- filter(personnages, Name == "Dolores Jane Umbridge") %>% select(Patronus)
meme_patronus <- patronus_EM == patronus_DJU
#Ils n'ont pas le même patronus
#7
hist(personnages$Sorts)
#8
#On ne filtre que sur les étudiantes
etudiantes_femmes = filter(personnages, Gender == "Female") %>% filter(Job == "Student")
min(etudiantes_femmes$Sorts)
filter(etudiantes_femmes, Sorts == 21) %>% select(House)
#L'etudiante qui a lançe le moins de sorts (21 sorts) est à Ravenclaw
#9
mean(personnages$Sorts, na.rm = TRUE)
#Les personnages ont lançé en moyenne environ 165 (164.8309) sorts
#On a exclu les valeurs nulles
mean(personnages$Sorts)
#Les personnages ont lançé en moyenne environ 165 (164.8309) sorts
n = length(personnages$Sorts)
((n-1)/n)*var(personnages$Sorts)
#L'écart type non corrigé est de 10 745.92
#10
moy_harm <- function(var) {
return(1/sum(1.5/var))
}
moy_harm(personnages$Sorts)
#La moyenne harmonique est 0.31
#11
etudiant_Gryf <- personnages %>% filter(Job == "Student" && House == "Gryffindor")
points_Gryf <- sum(etudiant_Gryf$Points)
etudiant_Rav <- personnages %>% filter(Job == "Student") %>%  filter(House == "Ravenclaw")
points_Rav <- sum(etudiant_Rav$Points)
etudiant_Sly <- personnages %>% filter(Job == "Student") %>% filter(House == "Slytherin")
points_Sly <- sum(etudiant_Sly$Points)
etudiant_Huf <- personnages %>% filter(Job == "Student") %>% filter(House == "Hufflepuff")
points_Huf <- sum(etudiant_Huf$Points)
#La coupe doit être remise à Gryffindor
#1 Gryffindor : 3646
#2 Slytherin : 673
#3 Ravenclaw : 629
#4 Hufflepuff : 367
#12
#a
Ron <- c("C", "C", "M", "M", "M", "O", "E", "FT", "FT", "FT")
#C : chocolat -> 20/100 = 2/10
#M : menthe ->30/100 = 3/10
#O : orange ->10/100 = 1/10
#E : epinard ->10/100 = 1/10
#FT : foie et tripe -> 30/100 = 3/10
#b
#Harry tire 7 bonbons
Harry <- sample(Ron, #on tire dans drages
7, #7 fois
replace = F #Sans remise
)
#Il en donne 2 à Hermione
Hermione <- sample(Harry, 2, replace = F)
#Hermione en remet un dans le paquet
Rendu <- sample(Hermione, 1, replace = F)
#13
Choixpeau <-function(){
X <- runif(4, 0, 3)
Y <- rgeom(4, 0.9)
Z = X+Y
max <- round(max(Z))
if(max%%2==1 && max%%3!=0) return("Slytherin") #Si impair et non divisible par 3
if(max%%2==1 && max%%3==0) return("Ravenclaw") #Si impair et divisible par 3
if(max%%2==0 && max%%7!=0) return("Hufflepuff") #Si pair et non divisible par 7
if(max%%2==0 && max%%7==0) return("Gryffindor") #Si pair et divisible par 7
}
Choixpeau()
lm(X1 ~ Y, data = iris)
summary(lm(X1 ~ Y, data = iris)) # Résumé
summary(lm(X1 ~ Y, data = iris))$r.squared
# Chgmt des données
data("iris")
# Changement de noms des variables
names(iris) <- c("X1","X2","X3","X4","Y")
# On veut les varibles X qui vont être utiles pour
# déterminer Y.
# X explique Y ??
# Lien graphique (boite à moustache) entre Y et X1
library(dplyr)
library(ggplot2)
iris %>%
ggplot(aes(x = Y, y = X1)) +
geom_boxplot()
# Y = (setosa, versicolor, virginica) = modalités
# Les écarts inter quartiles pour X1 sont importants.
# Graphiquement, X1 n'explique pas bien Y.
# Lien graphique (boite à moustache) entre Y
# et chaque variable X
library("tidyr")
iris %>%
gather("variable","mesure",-Y) %>%
ggplot(aes(x = Y, y = mesure)) +
geom_boxplot() +
facet_wrap(~ variable, scales = "free_y")
# Les écarts inter quartiles pour X1 sont importants.
# Graphiquement, X1 n'explique pas bien Y.
# La médiane de versicolor et de viriginica sont proches,
# Donc il y a bcp de risque d'erreur.
# Les valeurs de X3 sont différentes selon le Y.
# Donc X3 explique Y.
# Les valeurs de X4 sont différentes selon le Y.
# Donc X4 explique Y.
# Graphiquement, X3 et X4 expliquent le mieux Y.
#---
# 2.2 ANOVA
#Ajustement modèle lineaire pour X1
lm(X1 ~ Y, data = iris)
summary(lm(X1 ~ Y, data = iris)) # Résumé
summary(lm(X1 ~ Y, data = iris))$r.squared
# X1 : R² = 0.619
#Extension a toutes les variables
sapply(names(iris)[-5],
function(x) summary(lm(as.formula(paste(x,"~ Y")),
data = iris))$r.squared)
# X1 : R² = 0.619
# X2 : R² = 0.401
# X3 : R² = 0.941
# X4 : R² = 0.929
# Les R² sont le plus proche de 1 pour X3 et X4.
# X3 et X4 expliquent le mieux Y.
# X1 semble plutôt bien expliquer Y.
# Calcul de l'ANOVA (p-value du test) pour X1
anova(lm(X1~Y,data=iris))
anova(lm(X1~Y,data=iris))$`Pr(>F)`
anova(lm(X1~Y,data=iris))$`Pr(>F)`[1]
# H0 : il n'y a pas de lien entre x et y
# H1 : il y a un lien entre x et y
# p-value < 5% : on rejette H0 donc X1 explique Y.
# Extension à chacune des variables
sapply(names(iris)[-5],
function(x) anova(lm(as.formula(paste(x,"~ Y")),
data = iris))$`Pr(>F)`[1])
# p-value < 5% : on rejette H0 donc X1 explique Y.
# p-value < 5% : on rejette H0 donc X2 explique Y.
# p-value < 5% : on rejette H0 donc X3 explique Y.
# p-value < 5% : on rejette H0 donc X4 explique Y.
# X3 explique le mieux Y. X4 explique également très bien
# Y. X1 et X2 expliquent nettement moins bien Y.
anova(lm(X1~Y,data=iris))
anova(lm(X1~Y,data=iris))$`Pr(>F)`
anova(lm(X1~Y,data=iris))$`Pr(>F)`[1]
library(GGally)
ggpairs(iris, columns = 1:4, aes(color = Y, alpha = 0.8))
install.packages("GGally")
library(GGally)
ggpairs(iris, columns = 1:4, aes(color = Y, alpha = 0.8))
ggpairs(iris, columns = 1:4, aes(color = Y, alpha = 0.8))
install.packages("mvnormtest")
library(mvnormtest)
mshapiro.test(as.matrix(t(iris[iris$Y=="versicolor",1:4])))
mshapiro.test(as.matrix(t(iris[iris$Y=="setosa",1:4])))
mshapiro.test(as.matrix(t(iris[iris$Y=="virginica",1:4])))
source("BoxMTest.R") # Fichier à récupérer sur moodle
setwd("~/4A/Classification supervisée/TP1")
source("BoxMTest.R") # Fichier à récupérer sur moodle
BoxMTest(iris[,1:4],iris$Y)
BoxMTest(iris[,1:4],iris$Y)
iris_manova = manova(cbind(X1,X2,X3,X4)~Y,data=iris)
summary(iris_manova)
