k=nlevels(Y)
W=matrix(0,d,d)
ni=table(Y)
for (i in levels(Y)){
W=W+cov.wt(X[Y==i,],method="ML")$cov*ni[i]
}
W=W/sum(ni)
moyennes=by(X,Y,colMeans)
G=matrix(unlist(moyennes),k,d,byrow=T)
B=cov.wt(G,wt = as.vector(table(Y)),method="ML")$cov
alpha=matrix(0,(d+1),k)
rownames(alpha) = c("intercept",colnames(X))
colnames(alpha) = levels(Y)
for (i in 1:k) {
barXi=matrix(G[i,],d,1)
alpha[1,i]=-t(barXi)%*%solve(W)%*%barXi
alpha[2:(d+1),i]=2*solve(W)%*%barXi
}
return (alpha)
}
predictY<- function(X,alpha){
s=as.matrix(cbind(1,X))%*%alpha
Ypredit=colnames(alpha)[apply(s,1,which.max)]
}
alpha = calcalpha(iristrain[,1:4], iristrain[,5])
alpha
Ypredit = predictY(iristest[,1:4], alpha)
Ypredit[1:10]
table(Y = iristest[,5], Ypredit)
TBC=mean(iristest[,5]==Ypredit)
TBC
library("knitr")
purl("corrige_TP1.Rmd")
source("corrige_TP1.R")
table(Yreel = iris$Y,Ypredit = Ypredit)
TBC=mean(iris$Y==Ypredit)
TBC
TMC = 1 - TBC
TMC
n = nrow(iris)
set.seed(1234)
#Tirage
idx=sample(n,round(n*0.7),replace=FALSE)
#Echantillon d'apprentissage
iristrain=iris[idx,]
iristrain
#Echantillon test
iristest=iris[-idx,]
iristest
calcalpha <-function(X, Y){
d=ncol(X)
k=nlevels(Y)
W=matrix(0,d,d)
ni=table(Y)
for (i in levels(Y)){
W=W+cov.wt(X[Y==i,],method="ML")$cov*ni[i]
}
W=W/sum(ni)
moyennes=by(X,Y,colMeans)
G=matrix(unlist(moyennes),k,d,byrow=T)
B=cov.wt(G,wt = as.vector(table(Y)),method="ML")$cov
alpha=matrix(0,(d+1),k)
rownames(alpha) = c("intercept",colnames(X))
colnames(alpha) = levels(Y)
for (i in 1:k) {
barXi=matrix(G[i,],d,1)
alpha[1,i]=-t(barXi)%*%solve(W)%*%barXi
alpha[2:(d+1),i]=2*solve(W)%*%barXi
}
return (alpha)
}
predictY<- function(X,alpha){
s=as.matrix(cbind(1,X))%*%alpha
Ypredit=colnames(alpha)[apply(s,1,which.max)]
}
alpha = calcalpha(iristrain[,1:4], iristrain[,5])
alpha
Ypredit = predictY(iristest[,1:4], alpha)
table(Y = iristest[,5], Ypredit)
TMC = 1 - TBC
TMC
TBC=mean(iristest[,5]==Ypredit)
TBC
TMC = 1 - TBC
TMC
library("knitr")
purl("corrige_TP1.Rmd")
source("corrige_TP1.R")
table(Yreel = iris$Y,Ypredit = Ypredit)
TBC=mean(iris$Y==Ypredit)
TBC
TMC = 1 - TBC
TMC
n = nrow(iris)
set.seed(1234)
#Tirage
idx=sample(n,round(n*0.7),replace=FALSE)
#Echantillon d'apprentissage
iristrain=iris[idx,]
iristrain
#Echantillon test
iristest=iris[-idx,]
iristest
calcalpha <-function(X, Y){
d=ncol(X)
k=nlevels(Y)
W=matrix(0,d,d)
ni=table(Y)
for (i in levels(Y)){
W=W+cov.wt(X[Y==i,],method="ML")$cov*ni[i]
}
W=W/sum(ni)
moyennes=by(X,Y,colMeans)
G=matrix(unlist(moyennes),k,d,byrow=T)
B=cov.wt(G,wt = as.vector(table(Y)),method="ML")$cov
alpha=matrix(0,(d+1),k)
rownames(alpha) = c("intercept",colnames(X))
colnames(alpha) = levels(Y)
for (i in 1:k) {
barXi=matrix(G[i,],d,1)
alpha[1,i]=-t(barXi)%*%solve(W)%*%barXi
alpha[2:(d+1),i]=2*solve(W)%*%barXi
}
return (alpha)
}
predictY<- function(X,alpha){
s=as.matrix(cbind(1,X))%*%alpha
Ypredit=colnames(alpha)[apply(s,1,which.max)]
}
alpha = calcalpha(iristrain[,1:4], iristrain[,5])
alpha
Ypredit = predictY(iristest[,1:4], alpha)
table(Y = iristest[,5], Ypredit)
TBC=mean(iristest[,5]==Ypredit)
TBC
library("knitr")
purl("corrige_TP1.Rmd")
source("corrige_TP1.R")
table(Yreel = iris$Y,Ypredit = Ypredit)
TBC=mean(iris$Y==Ypredit)
TBC
TMC = 1 - TBC
TMC
n = nrow(iris)
set.seed(1234)
#Tirage
idx=sample(n,round(n*0.7),replace=FALSE)
#Echantillon d'apprentissage
iristrain=iris[idx,]
iristrain
#Echantillon test
iristest=iris[-idx,]
iristest
calcalpha <-function(X, Y){
d=ncol(X)
k=nlevels(Y)
W=matrix(0,d,d)
ni=table(Y)
for (i in levels(Y)){
W=W+cov.wt(X[Y==i,],method="ML")$cov*ni[i]
}
W=W/sum(ni)
moyennes=by(X,Y,colMeans)
G=matrix(unlist(moyennes),k,d,byrow=T)
B=cov.wt(G,wt = as.vector(table(Y)),method="ML")$cov
alpha=matrix(0,(d+1),k)
rownames(alpha) = c("intercept",colnames(X))
colnames(alpha) = levels(Y)
for (i in 1:k) {
barXi=matrix(G[i,],d,1)
alpha[1,i]=-t(barXi)%*%solve(W)%*%barXi
alpha[2:(d+1),i]=2*solve(W)%*%barXi
}
return (alpha)
}
predictY<- function(X,alpha){
s=as.matrix(cbind(1,X))%*%alpha
Ypredit=colnames(alpha)[apply(s,1,which.max)]
}
alpha = calcalpha(iristrain[,1:4], iristrain[,5])
alpha
Ypredit = predictY(iristest[,1:4], alpha)
table(Y = iristest[,5], Ypredit)
TBC=mean(iristest[,5]==Ypredit)
TBC
TMC = 1 - TBC
TMC
n = nrow(iris)
set.seed(1234)
#Tirage
idx=sample(n,round(n*0.7),replace=FALSE)
#Echantillon d'apprentissage
iristrain=iris[idx,]
iristrain
#Echantillon test
iristest=iris[-idx,]
iristest
calcalpha <-function(X, Y){
d=ncol(X)
k=nlevels(Y)
W=matrix(0,d,d)
ni=table(Y)
for (i in levels(Y)){
W=W+cov.wt(X[Y==i,],method="ML")$cov*ni[i]
}
W=W/sum(ni)
moyennes=by(X,Y,colMeans)
G=matrix(unlist(moyennes),k,d,byrow=T)
B=cov.wt(G,wt = as.vector(table(Y)),method="ML")$cov
alpha=matrix(0,(d+1),k)
rownames(alpha) = c("intercept",colnames(X))
colnames(alpha) = levels(Y)
for (i in 1:k) {
barXi=matrix(G[i,],d,1)
alpha[1,i]=-t(barXi)%*%solve(W)%*%barXi
alpha[2:(d+1),i]=2*solve(W)%*%barXi
}
return (alpha)
}
alpha = calcalpha(iristrain[,1:4], iristrain[,5])
alpha
Ypredit = predictY(iristest[,1:4], alpha)
TBC=mean(iristest[,5]==Ypredit)
TBC
TBC=mean(iristest[,5]==Ypredit)
TBC
alpha = calcalpha(iristrain[,1:4], iristrain[,5])
alpha
Ypredit = predictY(iristest[,1:4], alpha)
table(Y = iristest[,5], Ypredit)
table(Y = iristest[,5], Ypredit)
TBC=mean(iristest[,5]==Ypredit)
TBC
Ypredit = rep("",nrow(iris))
for (i in 1:n){
alpha = calcalpha(iris[-i,1:4],iris[-i,5])
Ypredit[i] = predictY(iris[i,1:4],alpha)
}
table(Y = iris[,5], Ypredit)
Ypredit = rep("",nrow(iris))
for (i in 1:n){
alpha = calcalpha(iris[-i,1:4],iris[-i,5])
Ypredit[i] = predictY(iris[i,1:4],alpha)
}
table(Y = iris[,5], Ypredit)
TBC=mean(iristest[,5]==Ypredit)
TBC
TMC = 1 - TBC
TMC
sapply(1:n,
function(i) predictY(iris[i,1:4],calcalpha(iris[-i,1:4],iris[-i,5])))
TBC=mean(iristest[,5]==Ypredit)
TBC
TBC=mean(iristest[,5]==Ypredit)
TBC
TBC=mean(iris$Y==Ypredit)
TBC
TMC = 1 - TBC
TMC
TMC = 1 - TBC
TMC
library(MASS)
library("MASS")
X<-iris[,1:4]
Y<-iris[,5]
LDAXY <- lda(X,grouping=Y,prior = prop.table(rep(1,nlevels(Y))))
LDAXY
X<-iris[,1:4]
Y<-iris[,5]
lda <- lda(X,grouping=Y,prior = prop.table(rep(1,nlevels(Y))))
lda
lda <- lda(X,grouping=Y,prior = prop.table(rep(1,nlevels(Y))))
lda
Ypredit <- predict(LDAXY)
names(Ypredit)
help names
names?
Ypredit <- predict(LDAXY)
Ypredit <- predict(LDAXY)
names(Ypredit)
Ypredit <- predict(LDAXY)
Ypredit
Ypredit <- predict(lda)
Ypredit
Ypredit <- predict(lda)
names(Ypredit)
library("knitr")
purl("corrige_TP1.Rmd")
source("corrige_TP1.R")
table(Yreel = iris$Y,Ypredit = Ypredit)
TBC=mean(iris$Y==Ypredit)
TBC
TMC = 1 - TBC
TMC
n = nrow(iris)
set.seed(1234)
#Tirage
idx=sample(n,round(n*0.7),replace=FALSE)
#Echantillon d'apprentissage
iristrain=iris[idx,]
iristrain
#Echantillon test
iristest=iris[-idx,]
iristest
calcalpha <-function(X, Y){
d=ncol(X)
k=nlevels(Y)
W=matrix(0,d,d)
ni=table(Y)
for (i in levels(Y)){
W=W+cov.wt(X[Y==i,],method="ML")$cov*ni[i]
}
W=W/sum(ni)
moyennes=by(X,Y,colMeans)
G=matrix(unlist(moyennes),k,d,byrow=T)
B=cov.wt(G,wt = as.vector(table(Y)),method="ML")$cov
alpha=matrix(0,(d+1),k)
rownames(alpha) = c("intercept",colnames(X))
colnames(alpha) = levels(Y)
for (i in 1:k) {
barXi=matrix(G[i,],d,1)
alpha[1,i]=-t(barXi)%*%solve(W)%*%barXi
alpha[2:(d+1),i]=2*solve(W)%*%barXi
}
return (alpha)
}
predictY<- function(X,alpha){
s=as.matrix(cbind(1,X))%*%alpha
Ypredit=colnames(alpha)[apply(s,1,which.max)]
}
alpha = calcalpha(iristrain[,1:4], iristrain[,5])
alpha
Ypredit = predictY(iristest[,1:4], alpha)
table(Y = iristest[,5], Ypredit)
TBC=mean(iristest[,5]==Ypredit)
TBC
TMC = 1 - TBC
TMC
Ypredit = rep("",nrow(iris))
for (i in 1:n){
alpha = calcalpha(iris[-i,1:4],iris[-i,5])
Ypredit[i] = predictY(iris[i,1:4],alpha)
}
table(Y = iris[,5], Ypredit)
TBC=mean(iris$Y==Ypredit)
TBC
TMC = 1 - TBC
TMC
#library("MASS")
lda <- lda(X,grouping=Y,prior = prop.table(rep(1,nlevels(Y))))
lda
Ypredit2 <- predict(lda)
names(Ypredit2)
table(Y,Ypredit = Ypredit2$class)
d = as.matrix(iris[,1:4]) %*% lda$scaling
plot(d, col = iris$Y)
LDAXY2 = lda(X,grouping=Y, CV=TRUE,prior = prop.table(rep(1,nlevels(Y))))
str(LDAXY2)
dim(LDAXYLOO$posterior)
dim(LDAXY2$posterior)
head(LDAXY2$posterior)
table(Yreel=Y,LOO=LDAXY2$class)
d = as.matrix(iris[,1:4]) %*% lda$scaling
d
plot(d, col = iris$Y)
d = as.matrix(iris[,1:4]) %*% lda$scaling
plot(d, col = iris$Y)
TBC=mean(Y==LDAXY2$class)
TBC
TMC = 1 - TBC
TMC = 1 - TBC
TMC
LDAXY3 = lda(X,grouping=Y,prior = prop.table(rep(1,nlevels(Y))))
str(LDAXY2)
LDAXY3 = lda(X,grouping=Y,prior = prop.table(rep(1,nlevels(Y))))
str(LDAXY3)
LDAXY3$scaling
LDAXY3 = lda(X,grouping=Y,prior = prop.table(rep(1,nlevels(Y))))
str(LDAXY3)
LDAXY3
LDAXY3 = lda(X,grouping=Y,prior = prop.table(rep(1,nlevels(Y))))
LDAXY3
iris[,1:4]*LDAXY3$scaling
proj = iris[,1:4]*LDAXY3$scaling
proj = iris[,1:4]*LDAXY3$scaling
proj
proj = as.matrix(iris[,1:4]) %*% LDAXY3$scaling
proj
d = as.matrix(iris[,1:4]) %*% LDAXY3$scaling
d
plot(d, col = iris$Y)
d = as.matrix(iris[,1:4]) %*% LDAXY3$scaling
library("knitr")
purl("corrige_TP1.Rmd")
source("corrige_TP1.R")
table(Yreel = iris$Y,Ypredit = Ypredit)
TBC=mean(iris$Y==Ypredit)
TBC
TMC = 1 - TBC
TMC
n = nrow(iris)
set.seed(1234)
#Tirage
idx=sample(n,round(n*0.7),replace=FALSE)
#Echantillon d'apprentissage
iristrain=iris[idx,]
iristrain
#Echantillon test
iristest=iris[-idx,]
iristest
calcalpha <-function(X, Y){
d=ncol(X)
k=nlevels(Y)
W=matrix(0,d,d)
ni=table(Y)
for (i in levels(Y)){
W=W+cov.wt(X[Y==i,],method="ML")$cov*ni[i]
}
W=W/sum(ni)
moyennes=by(X,Y,colMeans)
G=matrix(unlist(moyennes),k,d,byrow=T)
B=cov.wt(G,wt = as.vector(table(Y)),method="ML")$cov
alpha=matrix(0,(d+1),k)
rownames(alpha) = c("intercept",colnames(X))
colnames(alpha) = levels(Y)
for (i in 1:k) {
barXi=matrix(G[i,],d,1)
alpha[1,i]=-t(barXi)%*%solve(W)%*%barXi
alpha[2:(d+1),i]=2*solve(W)%*%barXi
}
return (alpha)
}
predictY<- function(X,alpha){
s=as.matrix(cbind(1,X))%*%alpha
Ypredit=colnames(alpha)[apply(s,1,which.max)]
}
alpha = calcalpha(iristrain[,1:4], iristrain[,5])
alpha
Ypredit = predictY(iristest[,1:4], alpha)
table(Y = iristest[,5], Ypredit)
TBC=mean(iristest[,5]==Ypredit)
TBC
TMC = 1 - TBC
TMC
Ypredit = rep("",nrow(iris))
for (i in 1:n){
alpha = calcalpha(iris[-i,1:4],iris[-i,5])
Ypredit[i] = predictY(iris[i,1:4],alpha)
}
table(Y = iris[,5], Ypredit)
TBC=mean(iris$Y==Ypredit)
TBC
TMC = 1 - TBC
TMC
#library("MASS")
lda <- lda(X,grouping=Y,prior = prop.table(rep(1,nlevels(Y))))
lda
Ypredit2 <- predict(lda)
names(Ypredit2)
table(Y,Ypredit = Ypredit2$class)
LDA2 = lda(X,grouping=Y, CV=TRUE,prior = prop.table(rep(1,nlevels(Y))))
str(LDA2)
head(LDA2$posterior)
table(Yreel=Y,LOO=LDA2$class)
TBC=mean(Y==LDA2$class)
TBC
TMC = 1 - TBC
TMC
LDA3 = lda(X,grouping=Y,prior = prop.table(rep(1,nlevels(Y))))
LDA3
LDA3$scaling
d = as.matrix(iris[,1:4]) %*% LDA3$scaling
plot(d, col = iris$Y)
Ypredit2 <- predict(lda)
table(Y,Ypredit = Ypredit2$class)
install.packages("tinytex")
library(tinytex)
install.packages("miktex")
View(X)
LDA3 = lda(X,grouping=Y,prior = prop.table(rep(1,nlevels(Y))))
LDA3
data("prema")
setwd("~/4A/Classification supervisée/TP4")
data("prema")
load("prema.RData")
str(prema)
prema$DIAB = as.factor(prema$DIAB)
attach(prema)
table(prema$PREMATURE, prema$GEMEL)
proba_prema_sachant_gemel = 35/39
proba_prema_sachant_gemel = 35/39
proba_prema_sachant_gemel
model1 <- glm(PREMATURE ~ GEMEL, family = "binomial", data = prema)
summary(model1)
model1 <- glm(PREMATURE ~ GEMEL, family = "binomial", data = prema)
summary(model1)
OR = (119*35)/(230*4)
OR = (119*35)/(230*4)
OR
OR = (119*35)/(230*4)
OR
OR = (119*35)/(230*4)
OR
OR = exp(1.5101)
OR
mean(prema$EFFACE)
mean(prema$EFFACE, prema$PREMATURE)
aggregate(prema$EFFACE, prema$PREMATURE, mean())
aggregate(x=prema$EFFACE, by = prema$PREMATURE, fun = mean)
aggregate(x=prema$EFFACE, by = prema$PREMATURE, FUN = mean)
aggregate( x=prema$EFFACE, by = prema$PREMATURE, FUN = mean)
by(prema$EFFACE, prema$PREMATURE, mean)
