x = arima.sim(list(ar=c(0.8)), n)
#représentation graphique
plot(x, main="AR(1) avec a = c(0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un AR(1) avec a = c(0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un AR(1) avec a = c(0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ar1.txt"), row.names = FALSE, col.names = FALSE)
### simulation AR(1) avec a = -0.8
x = arima.sim(list(ar=c(-0.8)), n)
#représentation graphique
plot(x, main="AR(1) avec a = c(-0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un AR(1) avec a = c(-0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un AR(1) avec a = c(-0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ar2.txt"), row.names = FALSE, col.names = FALSE)
### simulation AR(1) avec a = 1.2
#x = arima.sim(list(ar=c(1.2)), n)
### simulation AR(2) avec a = c(0,0.9)
x = arima.sim(list(ar=c(0,0.9)), n)
#représentation graphique
plot(x, main="AR(2) avec a = c(0,0.9)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un AR(2) avec a = c(0,0.9)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un AR(2) avec a = c(0,0.9)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ar3.txt"), row.names = FALSE, col.names = FALSE)
### simulation MA(1) avec b = c(0.8)
x = arima.sim(list(ma=c(0.8)), n)
#représentation graphique
plot(x, main="MA(1) avec b = c(0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un MA(1) avec b = c(0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un MA(1) avec b = c(0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ma1.txt"), row.names = FALSE, col.names = FALSE)
### simulation MA(1) avec b = c(-0.8)
x = arima.sim(list(ma=c(-0.8)), n)
#représentation graphique
plot(x, main="MA(1) avec b = c(-0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un MA(1) avec b = c(-0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un MA(1) avec b = c(-0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ma2.txt"), row.names = FALSE, col.names = FALSE)
### simulation MA(2) avec b = c(0,0.9)
x = arima.sim(list(ma=c(0,0.9)), n)
#représentation graphique
plot(x, main="MA(2) avec b = c(0,0.9)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un MA(2) avec b = c(0,0.9)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un MA(2) avec b = c(0,0.9)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ma2.txt"), row.names = FALSE, col.names = FALSE)
## Processus ARMA(p,q)
### ARMA(1,1) avec un coefficient a1 = 0.8 et b1 = 0.8
Simuler 1000 valeurs d’un processus ARMA(1,1) avec un coefficient a1 = 0.8 et b1 = 0.8 :
```{r}
### simulation ARMA(1,1) avec a=c(0.8) et b = c(0.8)
x = arima.sim(list(ar=c(0.8),ma=c(0.8)), n)
```
Représenter graphiquement les valeurs simulées :
```{r}
#représentation graphique
plot(x, main="ARMA(1,1) avec a=c(0.8) et b = c(0.8)")
```
#seed pour aléatoire
set.seed(10)
#longueur de la série
n = 1000
#dossier où enregistrer les séries
chemin = "~/5A/MATD-SW/Tp noté/"
### simulation AR(1) avec a = 0.8
x = arima.sim(list(ar=c(0.8)), n)
#représentation graphique
plot(x, main="AR(1) avec a = c(0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un AR(1) avec a = c(0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un AR(1) avec a = c(0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ar1.txt"), row.names = FALSE, col.names = FALSE)
### simulation AR(1) avec a = -0.8
x = arima.sim(list(ar=c(-0.8)), n)
#représentation graphique
plot(x, main="AR(1) avec a = c(-0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un AR(1) avec a = c(-0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un AR(1) avec a = c(-0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ar2.txt"), row.names = FALSE, col.names = FALSE)
### simulation AR(1) avec a = 1.2
#x = arima.sim(list(ar=c(1.2)), n)
### simulation AR(2) avec a = c(0,0.9)
x = arima.sim(list(ar=c(0,0.9)), n)
#représentation graphique
plot(x, main="AR(2) avec a = c(0,0.9)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un AR(2) avec a = c(0,0.9)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un AR(2) avec a = c(0,0.9)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ar3.txt"), row.names = FALSE, col.names = FALSE)
### simulation MA(1) avec b = c(0.8)
x = arima.sim(list(ma=c(0.8)), n)
#représentation graphique
plot(x, main="MA(1) avec b = c(0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un MA(1) avec b = c(0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un MA(1) avec b = c(0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ma1.txt"), row.names = FALSE, col.names = FALSE)
### simulation MA(1) avec b = c(-0.8)
x = arima.sim(list(ma=c(-0.8)), n)
#représentation graphique
plot(x, main="MA(1) avec b = c(-0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un MA(1) avec b = c(-0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un MA(1) avec b = c(-0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ma2.txt"), row.names = FALSE, col.names = FALSE)
### simulation MA(2) avec b = c(0,0.9)
x = arima.sim(list(ma=c(0,0.9)), n)
#représentation graphique
plot(x, main="MA(2) avec b = c(0,0.9)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un MA(2) avec b = c(0,0.9)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un MA(2) avec b = c(0,0.9)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ma2.txt"), row.names = FALSE, col.names = FALSE)
### simulation ARMA(1,1) avec a=c(0.8) et b = c(0.8)
x = arima.sim(list(ar=c(0.8),ma=c(0.8)), n)
#représentation graphique
plot(x, main="ARMA(1,1) avec a=c(0.8) et b = c(0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un ARMA(1,1) avec a=c(0.8) et b = c(0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un ARMA(1,1) avec a=c(0.8) et b = c(0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un ARMA(1,1) avec a=c(0.8) et b = c(0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/arma11.txt"), row.names = FALSE, col.names = FALSE)
#seed pour aléatoire
set.seed(10)
#longueur de la série
n = 1000
#dossier où enregistrer les séries
chemin = "~/5A/MATD-SW/Tp noté/"
### simulation AR(1) avec a = 0.8
x = arima.sim(list(ar=c(0.8)), n)
#représentation graphique
plot(x, main="AR(1) avec a = c(0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un AR(1) avec a = c(0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un AR(1) avec a = c(0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ar1.txt"), row.names = FALSE, col.names = FALSE)
### simulation AR(1) avec a = -0.8
x = arima.sim(list(ar=c(-0.8)), n)
#représentation graphique
plot(x, main="AR(1) avec a = c(-0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un AR(1) avec a = c(-0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un AR(1) avec a = c(-0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ar2.txt"), row.names = FALSE, col.names = FALSE)
### simulation AR(1) avec a = 1.2
#x = arima.sim(list(ar=c(1.2)), n)
### simulation AR(2) avec a = c(0,0.9)
x = arima.sim(list(ar=c(0,0.9)), n)
#représentation graphique
plot(x, main="AR(2) avec a = c(0,0.9)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un AR(2) avec a = c(0,0.9)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un AR(2) avec a = c(0,0.9)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ar3.txt"), row.names = FALSE, col.names = FALSE)
### simulation MA(1) avec b = c(0.8)
x = arima.sim(list(ma=c(0.8)), n)
#représentation graphique
plot(x, main="MA(1) avec b = c(0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un MA(1) avec b = c(0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un MA(1) avec b = c(0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ma1.txt"), row.names = FALSE, col.names = FALSE)
### simulation MA(1) avec b = c(-0.8)
x = arima.sim(list(ma=c(-0.8)), n)
#représentation graphique
plot(x, main="MA(1) avec b = c(-0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un MA(1) avec b = c(-0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un MA(1) avec b = c(-0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ma2.txt"), row.names = FALSE, col.names = FALSE)
### simulation MA(2) avec b = c(0,0.9)
x = arima.sim(list(ma=c(0,0.9)), n)
#représentation graphique
plot(x, main="MA(2) avec b = c(0,0.9)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un MA(2) avec b = c(0,0.9)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un MA(2) avec b = c(0,0.9)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ma2.txt"), row.names = FALSE, col.names = FALSE)
### simulation ARMA(1,1) avec a=c(0.8) et b = c(0.8)
x = arima.sim(list(ar=c(0.8),ma=c(0.8)), n)
#représentation graphique
plot(x, main="ARMA(1,1) avec a=c(0.8) et b = c(0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un ARMA(1,1) avec a=c(0.8) et b = c(0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un ARMA(1,1) avec a=c(0.8) et b = c(0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un ARMA(1,1) avec a=c(0.8) et b = c(0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/arma1.txt"), row.names = FALSE, col.names = FALSE)
### simulation ARMA(1,1) avec a=c(0) et b = c(0.8)
x = arima.sim(list(ar=c(0),ma=c(0.8)), n)
#représentation graphique
plot(x, main="ARMA(1,1) avec a=c(0) et b = c(0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un ARMA(1,1) avec a=c(0) et b = c(0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un ARMA(1,1) avec a=c(0) et b = c(0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un ARMA(1,1) avec a=c(0) et b = c(0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/arma2.txt"), row.names = FALSE, col.names = FALSE)
# Importation des données
donnees = read.table("ST-data-salaire.csv", header = TRUE)
# création d'un objet ts
# l'option start contient l'année et le trimestre de départ
# l'option frequency définit le fait de travailler avec des trimestres
mse = ts(donnees[1:80,1], start = c(1990, 1), frequency = 4)
# Aperçu des données
print(mse)
plot(mse, main = "masse salariale trimestrielle de 1990 à 2009")
# fonction d'autocorrélation avec un lag de 40
acf(mse, lag.max = 40, main = "ACF de mse")
# fonction d'autocorrélation partielle avec un lag de 40
pacf(mse, lag.max = 40, main = "PACF de mse")
# Décomposition de la série en tendance, saisonnalité et erreur.
# Le paramètre type peut prendre la valeur "additive" en cas de saisonnalité additive.
msenosais = decompose(mse, type = "multiplicative")
# la série d'origine
msenosais$x
# les coefficients saisonniers
msenosais$seasonal
# la tendance
msenosais$trend
# la partie aléatoire de la série (sans tendance ni saisonnalité).
# On notera la présente de NA.
msenosais$random
# représentation graphique des quantités présentées ci-dessus
plot(msenosais)
# Décomposition de la série en tendance, saisonnalité et erreur.
# Le paramètre type peut prendre la valeur "additive" en cas de saisonnalité additive.
msenosais = decompose(mse, type = "multiplicative")
# la série d'origine
msenosais$x
# les coefficients saisonniers
msenosais$seasonal
# la tendance
msenosais$trend
# la partie aléatoire de la série (sans tendance ni saisonnalité).
# On notera la présente de NA.
msenosais$random
# représentation graphique des quantités présentées ci-dessus
plot(msenosais)
# fonction d'autocorrélation avec un lag de 40.
# L'option na.action = na.pass permet de gérer les valeurs manquantes.
acf(msenosais$random, lag.max = 40, main = "ACF de mse après décomposition saisonnière",
na.action = na.pass)
# fonction d'autocorrélation partielle avec un lag de 40
pacf(msenosais$random, lag.max = 40, main = "PACF de mse après décomposition saisonnière",
na.action = na.pass)
# Le paramètre seasonal permet de spécifier l'ordre la partie saisonnière d'un SARIMA
# ainsi que sa période.mse31 = arima(msenosais$random, order = c(3, 0, 1),
seasonal = list(order = c(0,0,0), period = NA)
#aperçu des coefficients
print(mse31)
#aperçu des coefficients
print(seasonal$mse31)
# Le paramètre seasonal permet de spécifier l'ordre la partie saisonnière d'un SARIMA
# ainsi que sa période.mse31 = arima(msenosais$random, order = c(3, 0, 1),
seasonal = list(order = c(0,0,0), period = NA)
#aperçu des coefficients
print(seasonal$mse31)
#aperçu des coefficients
print(seasonal)
# Le paramètre seasonal permet de spécifier l'ordre la partie saisonnière d'un SARIMA
# ainsi que sa période.mse31 = arima(msenosais$random, order = c(3, 0, 1),
seasonal = list(order = c(3,0,1), period = NA)
#aperçu des coefficients
print(seasonal)
# Le paramètre seasonal permet de spécifier l'ordre, la partie saisonnière d'un SARIMA
# ainsi que sa période.
mse31 = arima(msenosais$random, order = c(3, 0, 1), seasonal = list(order = c(0,0,0), period = NA))
#aperçu des coefficients
print(mse31)
# Test de Ljung-Box
# lag = 20 spécifie que la statistique de test est calculée à partir
# des 20 premières autocorrélations.
Box.test(mse31$residuals, lag = 20)
# Test de Ljung-Box
# lag = 20 spécifie que la statistique de test est calculée à partir
# des 20 premières autocorrélations.
Box.test(mse31$residuals, lag = 20)
# Estimation d'un SARIMA(0,0,1)(1,0,1) de période 4.
mse01 = arima(msenosais$random, order = c(0, 0, 1),
seasonal = list(order = c(1, 0, 1), period = 4))
# Aperçu des coefficients
print(mse01)
#BIC du ARIMA(3,0,1)
BIC(mse31)
# BIC du SARIMA(0,0,1)(1,0,1)
BIC(mse01)
# Régression linéaire
mselm = lm(mse ~ donnees[1:80,2])
# Aperçu des résultats
summary(mselm)
# On prédit 4 nouveaux trimestres à l'aide du modèle SARIMA
predmse11 = predict(mse11,4)
#seed pour aléatoire
set.seed(10)
#longueur de la série
n = 1000
#dossier où enregistrer les séries
chemin = "~/5A/MATD-SW/Tp noté/"
### simulation AR(1) avec a = 0.8
x = arima.sim(list(ar=c(0.8)), n)
#représentation graphique
plot(x, main="AR(1) avec a = c(0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un AR(1) avec a = c(0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un AR(1) avec a = c(0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ar1.txt"), row.names = FALSE, col.names = FALSE)
### simulation AR(1) avec a = -0.8
x = arima.sim(list(ar=c(-0.8)), n)
#représentation graphique
plot(x, main="AR(1) avec a = c(-0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un AR(1) avec a = c(-0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un AR(1) avec a = c(-0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ar2.txt"), row.names = FALSE, col.names = FALSE)
### simulation AR(1) avec a = 1.2
#x = arima.sim(list(ar=c(1.2)), n)
### simulation AR(2) avec a = c(0,0.9)
x = arima.sim(list(ar=c(0,0.9)), n)
#représentation graphique
plot(x, main="AR(2) avec a = c(0,0.9)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un AR(2) avec a = c(0,0.9)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un AR(2) avec a = c(0,0.9)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ar3.txt"), row.names = FALSE, col.names = FALSE)
### simulation MA(1) avec b = c(0.8)
x = arima.sim(list(ma=c(0.8)), n)
#représentation graphique
plot(x, main="MA(1) avec b = c(0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un MA(1) avec b = c(0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un MA(1) avec b = c(0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ma1.txt"), row.names = FALSE, col.names = FALSE)
### simulation MA(1) avec b = c(-0.8)
x = arima.sim(list(ma=c(-0.8)), n)
#représentation graphique
plot(x, main="MA(1) avec b = c(-0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un MA(1) avec b = c(-0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un MA(1) avec b = c(-0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ma2.txt"), row.names = FALSE, col.names = FALSE)
### simulation MA(2) avec b = c(0,0.9)
x = arima.sim(list(ma=c(0,0.9)), n)
#représentation graphique
plot(x, main="MA(2) avec b = c(0,0.9)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un MA(2) avec b = c(0,0.9)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un MA(2) avec b = c(0,0.9)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/ma2.txt"), row.names = FALSE, col.names = FALSE)
### simulation ARMA(1,1) avec a=c(0.8) et b = c(0.8)
x = arima.sim(list(ar=c(0.8),ma=c(0.8)), n)
#représentation graphique
plot(x, main="ARMA(1,1) avec a=c(0.8) et b = c(0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un ARMA(1,1) avec a=c(0.8) et b = c(0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un ARMA(1,1) avec a=c(0.8) et b = c(0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un ARMA(1,1) avec a=c(0.8) et b = c(0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/arma1.txt"), row.names = FALSE, col.names = FALSE)
### simulation ARMA(1,1) avec a=c(0) et b = c(0.8)
x = arima.sim(list(ar=c(0),ma=c(0.8)), n)
#représentation graphique
plot(x, main="ARMA(1,1) avec a=c(0) et b = c(0.8)")
#autocorrélation
acx = acf(x, lag.max=40, main="ACF d'un ARMA(1,1) avec a=c(0) et b = c(0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un ARMA(1,1) avec a=c(0) et b = c(0.8)")
#autocorrélation partielle
pacx = pacf(x, lag.max=40, main="PACF d'un ARMA(1,1) avec a=c(0) et b = c(0.8)")
#enregistrement de la série
write.table(x, file=paste0(chemin,"/arma2.txt"), row.names = FALSE, col.names = FALSE)
# Importation des données
donnees = read.table("ST-data-salaire.csv", header = TRUE)
# création d'un objet ts
# l'option start contient l'année et le trimestre de départ
# l'option frequency définit le fait de travailler avec des trimestres
mse = ts(donnees[1:80,1], start = c(1990, 1), frequency = 4)
# Aperçu des données
print(mse)
plot(mse, main = "masse salariale trimestrielle de 1990 à 2009")
# fonction d'autocorrélation avec un lag de 40
acf(mse, lag.max = 40, main = "ACF de mse")
# fonction d'autocorrélation partielle avec un lag de 40
pacf(mse, lag.max = 40, main = "PACF de mse")
# Décomposition de la série en tendance, saisonnalité et erreur.
# Le paramètre type peut prendre la valeur "additive" en cas de saisonnalité additive.
msenosais = decompose(mse, type = "multiplicative")
# la série d'origine
msenosais$x
# les coefficients saisonniers
msenosais$seasonal
# la tendance
msenosais$trend
# la partie aléatoire de la série (sans tendance ni saisonnalité).
# On notera la présente de NA.
msenosais$random
# représentation graphique des quantités présentées ci-dessus
plot(msenosais)
# fonction d'autocorrélation avec un lag de 40.
# L'option na.action = na.pass permet de gérer les valeurs manquantes.
acf(msenosais$random, lag.max = 40, main = "ACF de mse après décomposition saisonnière",
na.action = na.pass)
# fonction d'autocorrélation partielle avec un lag de 40
pacf(msenosais$random, lag.max = 40, main = "PACF de mse après décomposition saisonnière",
na.action = na.pass)
# Le paramètre seasonal permet de spécifier l'ordre, la partie saisonnière d'un SARIMA
# ainsi que sa période.
mse31 = arima(msenosais$random, order = c(3, 0, 1), seasonal = list(order = c(0,0,0), period = NA))
#aperçu des coefficients
print(mse31)
# Test de Ljung-Box
# lag = 20 spécifie que la statistique de test est calculée à partir
# des 20 premières autocorrélations.
Box.test(mse31$residuals, lag = 20)
# Estimation d'un SARIMA(0,0,1)(1,0,1) de période 4.
mse01 = arima(msenosais$random, order = c(0, 0, 1),
seasonal = list(order = c(1, 0, 1), period = 4))
# Aperçu des coefficients
print(mse01)
#BIC du ARIMA(3,0,1)
BIC(mse31)
# BIC du SARIMA(0,0,1)(1,0,1)
BIC(mse01)
# Régression linéaire
mselm = lm(mse ~ donnees[1:80,2])
# Aperçu des résultats
summary(mselm)
# Estimation d'un SARIMA(0,1,1)(1,0,1) de période 4.
#mse11 = arima(mse, order = c(0, 1, 1),
# seasonal = list(order = c(1, 0, 1), period = 4))
# Estimation d'un SARIMA(0,1,1)(0,1,1) de période 4.
mse11 = arima(mse, order = c(0, 1, 1),
seasonal = list(order = c(0, 1, 1), period = 4))
mseHW = HoltWinters(mse, alpha = NULL, beta = NULL, gamma = NULL,
seasonal = "multiplicative")
plot(mseHW)
# On prédit 4 nouveaux trimestres à l'aide du modèle SARIMA
predmse11 = predict(mse11,4)
predmseHW = predict(mseHW,4)
plot(ts(donnees[,1], start = c(1990, 1), frequency = 4), ylab = "MSE")
lines(ts(predmse11$pred, start = c(2010, 1), frequency = 4), col="red")
lines(ts(predmseHW, start = c(2010, 1), frequency = 4), col="blue")
plot(ts(donnees[65:84,1], start = c(2006, 1), frequency = 4),
ylim = c(min(donnees[65:84,1]), max(predmseHW)), ylab = "MSE")
lines(ts(predmse11$pred, start = c(2010, 1), frequency = 4), col="red")
lines(ts(predmseHW, start = c(2010, 1), frequency = 4), col="blue")
legend("bottomright", c("SARIMA","HW"), col=c("red","blue"), lty=1, cex=0.7)
# Test de Ljung-Box
# lag = 20 spécifie que la statistique de test est calculée à partir
# des 20 premières autocorrélations.
Box.test(mse31$residuals, lag = 20)
